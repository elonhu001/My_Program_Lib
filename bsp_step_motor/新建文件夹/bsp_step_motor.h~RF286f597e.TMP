#ifndef __BSP_STEP_MOTOR_H
#define __BSP_STEP_MOTOR_H

#define PWM_FREQUENCE 50                                                /*<! the frequncy of pwm :PWM_FREQUENCE= APB / ((ARR + 1) * (PSC + 1)) */
#define PWM_RESOLUTION 10000                                            /*<! the reload value, period, remember -1 when use it to initialize timer */
#define PWM_DEFAULT_DUTY (PWM_RESOLUTION/2)                             /*<! the default duty is 50% */

#define TIM_PSC_APB1 ((APB1_TIMER_CLOCKS/PWM_FREQUENCE)/PWM_RESOLUTION) /*<! the prescaler of timer */
#define APB1_TIMER_CLOCKS 90000000                                      /*<! the clock frequncy of timer */

#define SUBDIVISION (400)//20000

typedef struct
{
	TIM_HandleTypeDef* timer; /*<! timer that motor used */
	uint32_t channel;         /*<! channel that motor used*/
	GPIO_TypeDef* gpiox;      /*<! gpio that motor used */
	uint16_t pinx;
	
	uint32_t apb_timer_clocks;
	
	uint16_t subdivision;     /*<! the needed pulses for one circle */
	uint32_t pulse_cnt;
	uint8_t rotate_ok_flag;
	uint32_t laps;
	void (*f_forward) (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
	void (*f_back) (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
}step_motor_t;



#endif


